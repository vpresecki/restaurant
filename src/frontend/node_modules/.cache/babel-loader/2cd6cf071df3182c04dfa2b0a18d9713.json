{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prese\\\\projects\\\\restaurant\\\\src\\\\frontend\\\\src\\\\context\\\\DataContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from 'react';\nimport { useAuthContext } from '../hooks/useAuthContext';\nimport HttpRequest from '../utils/HttpRequest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/createContext();\n\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_POSTS_SUCCESS':\n      return { ...state,\n        posts: action.payload\n      };\n\n    case 'ADD_POST_SUCCESS':\n      return { ...state,\n        posts: [...state.posts, action.payload]\n      };\n\n    case 'GET_POST_SUCCESS':\n      return { ...state\n      };\n\n    case 'FETCH_MENUS_SUCCESS':\n      return { ...state,\n        menus: [...state.menus, action.payload]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport function DataProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    access_token\n  } = useAuthContext();\n  const [state, dispatch] = useReducer(dataReducer, {\n    posts: null,\n    menus: null\n  });\n\n  const fetchPosts = async () => {\n    try {\n      const posts = await HttpRequest.GET('/api/v1/restaurant/posts', access_token);\n      dispatch({\n        type: 'FETCH_POSTS_SUCCESS',\n        payload: posts\n      });\n    } catch (error) {\n      dispatch({\n        type: 'FAILED_FETCH',\n        payload: 'Something went wrong, could not load posts.'\n      });\n    }\n  };\n\n  const addPost = async post => {\n    try {\n      const data = await HttpRequest.POST('/api/v1/restaurant/posts/save', access_token, post);\n      dispatch({\n        type: 'SAVE_POST_SUCCESS',\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: 'FAILED_FETCH',\n        payload: 'Something went wrong, could not load posts.'\n      });\n    }\n  };\n\n  const getPost = async postId => {\n    try {\n      await HttpRequest.GET(`/api/v1/restaurant/posts/${postId}`, access_token);\n      dispatch({\n        type: 'GET_POST_SUCCESS'\n      });\n    } catch (error) {\n      dispatch({\n        type: 'FAILED_FETCH',\n        payload: 'Something went wrong, could not load posts.'\n      });\n    }\n  };\n\n  const fetchMenus = async () => {\n    try {\n      const menus = await HttpRequest.GET(`/api/v1/restaurant/menus}`, access_token);\n      dispatch({\n        type: 'FETCH_MENUS_SUCCESS',\n        payload: menus\n      });\n    } catch (error) {\n      dispatch({\n        type: 'FAILED_FETCH',\n        payload: 'Something went wrong, could not load menus.'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: { ...state,\n      fetchPosts,\n      addPost,\n      getPost,\n      fetchMenus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DataProvider, \"XuD//aQckFMfMoSZHMsqMKcDZo0=\", false, function () {\n  return [useAuthContext];\n});\n\n_c = DataProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"sources":["C:/Users/prese/projects/restaurant/src/frontend/src/context/DataContext.js"],"names":["createContext","useReducer","useAuthContext","HttpRequest","DataContext","dataReducer","state","action","type","posts","payload","menus","DataProvider","children","access_token","dispatch","fetchPosts","GET","error","addPost","post","data","POST","getPost","postId","fetchMenus"],"mappings":"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","sourcesContent":["import { createContext, useReducer } from 'react';\r\nimport { useAuthContext } from '../hooks/useAuthContext';\r\nimport HttpRequest from '../utils/HttpRequest';\r\nexport const DataContext = createContext();\r\n\r\nconst dataReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_POSTS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        posts: action.payload,\r\n      };\r\n    case 'ADD_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, action.payload],\r\n      };\r\n    case 'GET_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n      };\r\n    case 'FETCH_MENUS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        menus: [...state.menus, action.payload],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function DataProvider({ children }) {\r\n  const { access_token } = useAuthContext();\r\n  const [state, dispatch] = useReducer(dataReducer, {\r\n    posts: null,\r\n    menus: null,\r\n  });\r\n\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const posts = await HttpRequest.GET(\r\n        '/api/v1/restaurant/posts',\r\n        access_token\r\n      );\r\n      dispatch({ type: 'FETCH_POSTS_SUCCESS', payload: posts });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'FAILED_FETCH',\r\n        payload: 'Something went wrong, could not load posts.',\r\n      });\r\n    }\r\n  };\r\n\r\n  const addPost = async (post) => {\r\n    try {\r\n      const data = await HttpRequest.POST(\r\n        '/api/v1/restaurant/posts/save',\r\n        access_token,\r\n        post\r\n      );\r\n      dispatch({ type: 'SAVE_POST_SUCCESS', payload: data });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'FAILED_FETCH',\r\n        payload: 'Something went wrong, could not load posts.',\r\n      });\r\n    }\r\n  };\r\n\r\n  const getPost = async (postId) => {\r\n    try {\r\n      await HttpRequest.GET(`/api/v1/restaurant/posts/${postId}`, access_token);\r\n      dispatch({ type: 'GET_POST_SUCCESS' });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'FAILED_FETCH',\r\n        payload: 'Something went wrong, could not load posts.',\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchMenus = async () => {\r\n    try {\r\n      const menus = await HttpRequest.GET(\r\n        `/api/v1/restaurant/menus}`,\r\n        access_token\r\n      );\r\n      dispatch({ type: 'FETCH_MENUS_SUCCESS', payload: menus });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'FAILED_FETCH',\r\n        payload: 'Something went wrong, could not load menus.',\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DataContext.Provider\r\n      value={{\r\n        ...state,\r\n        fetchPosts,\r\n        addPost,\r\n        getPost,\r\n        fetchMenus,\r\n      }}\r\n    >\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}